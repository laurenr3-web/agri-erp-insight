
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { addPart, updatePart, deletePart } from '@/services/supabase/parts'; // Corrected import path
import { useToast } from '@/hooks/use-toast';
import { Part } from '@/types/Part';

/**
 * Hook pour cr√©er une nouvelle pi√®ce avec les mutations React Query
 * Fournit des notifications toast appropri√©es et l'invalidation du cache
 */
export function useCreatePart() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  
  return useMutation({
    mutationFn: (newPart: Omit<Part, 'id'>) => {
      console.log('üìù Tentative de cr√©ation de pi√®ce:', newPart);
      return addPart(newPart);
    },
    onSuccess: (data: Part) => {
      console.log('‚úÖ Pi√®ce cr√©√©e avec succ√®s:', data);
      queryClient.invalidateQueries({ queryKey: ['parts'] });
      toast({
        title: "Pi√®ce ajout√©e",
        description: `${data.name} a √©t√© ajout√©e √† l'inventaire.`,
      });
    },
    onError: (error: any) => {
      // Analyse d√©taill√©e des erreurs
      let errorMessage = "Impossible d'ajouter la pi√®ce";
      
      if (error.code === '23505') {
        errorMessage = "Cette r√©f√©rence de pi√®ce existe d√©j√†.";
      } else if (error.code === '23502') {
        errorMessage = "Des champs obligatoires sont manquants.";
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      console.error("‚ùå Erreur lors de l'ajout de pi√®ce:", errorMessage, error);
      
      toast({
        title: "Erreur d'ajout",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });
}

/**
 * Hook pour mettre √† jour une pi√®ce existante avec les mutations React Query
 * Fournit des notifications toast appropri√©es et l'invalidation du cache
 */
export function useUpdatePart() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  
  return useMutation({
    mutationFn: (updatedPart: Part) => {
      console.log('üìù Tentative de mise √† jour:', updatedPart);
      if (!updatedPart.id) {
        throw new Error("ID de pi√®ce requis pour la mise √† jour");
      }
      return updatePart(updatedPart);
    },
    onMutate: async (updatedPart: Part) => {
      console.log('‚è≥ Pr√©paration de la mise √† jour optimiste pour la pi√®ce:', updatedPart.id);
      
      // V√©rifier que l'ID est valide
      if (!updatedPart.id) {
        console.error('‚ùå Tentative de mise √† jour sans ID');
        return { previousParts: null };
      }
      
      // Annuler toutes les requ√™tes de r√©cup√©ration sortantes
      await queryClient.cancelQueries({ queryKey: ['parts'] });
      
      // Prendre un instantan√© de la valeur pr√©c√©dente
      const previousParts = queryClient.getQueryData<Part[]>(['parts']);
      
      // Mettre √† jour le cache de mani√®re optimiste
      try {
        queryClient.setQueryData<Part[]>(['parts'], (oldData = []) => {
          return oldData.map(part => 
            part.id === updatedPart.id ? updatedPart : part
          );
        });
      } catch (error) {
        console.error('‚ùå Erreur lors de la mise √† jour optimiste:', error);
      }
      
      return { previousParts };
    },
    onSuccess: (updatedPart: Part) => {
      console.log('‚úÖ Mise √† jour r√©ussie:', updatedPart);
      
      // Invalider les queries pour forcer un rafra√Æchissement
      queryClient.invalidateQueries({ 
        queryKey: ['parts']
      });
      
      // Afficher une notification de succ√®s
      toast({
        title: "Pi√®ce mise √† jour",
        description: `${updatedPart.name} a √©t√© mise √† jour avec succ√®s.`,
      });
    },
    onError: (error: any, variables, context) => {
      console.error('‚ùå √âchec de la mise √† jour:', error);
      
      // Annuler la mise √† jour optimiste seulement si nous avons des donn√©es pr√©c√©dentes
      if (context?.previousParts) {
        queryClient.setQueryData(['parts'], context.previousParts);
      }
      
      // Analyse d√©taill√©e des erreurs
      let errorMessage = "Impossible de mettre √† jour la pi√®ce";
      
      if (error.code === '23505') {
        errorMessage = "Cette r√©f√©rence de pi√®ce existe d√©j√†.";
      } else if (error.code === '23502') {
        errorMessage = "Des champs obligatoires sont manquants.";
      } else if (error.code === '42703') {
        errorMessage = "Structure de donn√©es incorrecte. Contactez l'administrateur.";
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      toast({
        title: "Erreur de modification",
        description: errorMessage,
        variant: "destructive",
      });
    },
    onSettled: () => {
      console.log('üèÅ Finalisation de la mise √† jour');
      // Refetch pour s'assurer que les donn√©es sont √† jour
      queryClient.refetchQueries({ queryKey: ['parts'] });
    }
  });
}

/**
 * Hook pour supprimer une pi√®ce avec les mutations React Query
 * Fournit des notifications toast appropri√©es et l'invalidation du cache
 */
export function useDeletePart() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  
  return useMutation({
    mutationFn: (partId: number) => {
      console.log('üóëÔ∏è Tentative de suppression de la pi√®ce:', partId);
      if (!partId || isNaN(Number(partId))) {
        throw new Error("ID de pi√®ce invalide");
      }
      return deletePart(partId);
    },
    onMutate: async (partId: number) => {
      await queryClient.cancelQueries({ queryKey: ['parts'] });
      
      // Sauvegarder l'√©tat pr√©c√©dent
      const previousParts = queryClient.getQueryData<Part[]>(['parts']);
      
      // Supprimer optimiste
      queryClient.setQueryData<Part[]>(['parts'], (oldData = []) => {
        return oldData.filter(part => part.id !== partId);
      });
      
      return { previousParts };
    },
    onSuccess: (_, partId) => {
      console.log('‚úÖ Suppression r√©ussie de la pi√®ce:', partId);
      
      // Supprimer la pi√®ce du cache
      queryClient.removeQueries({ queryKey: ['parts', partId] });
      // Invalider la liste pour la rafra√Æchir
      queryClient.invalidateQueries({ queryKey: ['parts'] });
      
      toast({
        title: "Pi√®ce supprim√©e",
        description: "La pi√®ce a √©t√© supprim√©e de l'inventaire.",
      });
    },
    onError: (error: any, partId, context) => {
      console.error('‚ùå √âchec de la suppression:', error);
      
      // Restaurer l'√©tat pr√©c√©dent
      if (context?.previousParts) {
        queryClient.setQueryData(['parts'], context.previousParts);
      }
      
      // Message d'erreur sp√©cifique
      let errorMessage = "Impossible de supprimer la pi√®ce";
      
      if (error.code === '23503') {
        errorMessage = "Cette pi√®ce est r√©f√©renc√©e par d'autres √©l√©ments et ne peut pas √™tre supprim√©e.";
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      toast({
        title: "Erreur de suppression",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });
}
