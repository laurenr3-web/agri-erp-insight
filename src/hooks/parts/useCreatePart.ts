
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { addPart } from '@/services/supabase/parts/addPartService';
import { useToast } from '@/hooks/use-toast';
import { Part } from '@/types/Part';
import { supabase } from '@/integrations/supabase/client';

/**
 * Hook pour cr√©er une nouvelle pi√®ce avec les mutations React Query
 * Fournit des notifications toast appropri√©es et l'invalidation du cache
 */
export function useCreatePart() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  
  return useMutation({
    mutationFn: (newPart: Omit<Part, 'id'>) => {
      console.log('üìù Tentative de cr√©ation de pi√®ce:', newPart);
      
      // V√©rifier que Supabase est bien connect√©
      if (!supabase) {
        throw new Error("Client Supabase non initialis√©");
      }
      
      // Ajouter une v√©rification des champs obligatoires
      if (!newPart.name || !newPart.partNumber) {
        throw new Error("Le nom et le num√©ro de pi√®ce sont obligatoires");
      }
      
      return addPart(newPart);
    },
    onSuccess: (data: Part) => {
      console.log('‚úÖ Pi√®ce cr√©√©e avec succ√®s:', data);
      queryClient.invalidateQueries({ queryKey: ['parts'] });
      toast({
        title: "Pi√®ce ajout√©e",
        description: `${data.name} a √©t√© ajout√©e √† l'inventaire.`,
      });
    },
    onError: (error: any) => {
      // Analyse d√©taill√©e des erreurs
      let errorMessage = "Impossible d'ajouter la pi√®ce";
      
      if (error.code === '23505') {
        errorMessage = "Cette r√©f√©rence de pi√®ce existe d√©j√†.";
      } else if (error.code === '23502') {
        errorMessage = "Des champs obligatoires sont manquants.";
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      console.error("‚ùå Erreur lors de l'ajout de pi√®ce:", errorMessage, error);
      
      toast({
        title: "Erreur d'ajout",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });
}
