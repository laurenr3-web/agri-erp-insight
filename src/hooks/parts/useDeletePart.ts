
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { deletePart } from '@/services/supabase/parts';
import { useToast } from '@/hooks/use-toast';
import { Part } from '@/types/Part';

/**
 * Hook pour supprimer une pi√®ce avec les mutations React Query
 * Fournit des notifications toast appropri√©es et l'invalidation du cache
 */
export function useDeletePart() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  
  return useMutation({
    mutationFn: (partId: number) => {
      console.log('üóëÔ∏è Tentative de suppression de la pi√®ce:', partId);
      if (!partId || isNaN(Number(partId))) {
        throw new Error("ID de pi√®ce invalide");
      }
      return deletePart(partId);
    },
    onMutate: async (partId: number) => {
      await queryClient.cancelQueries({ queryKey: ['parts'] });
      
      // Sauvegarder l'√©tat pr√©c√©dent
      const previousParts = queryClient.getQueryData<Part[]>(['parts']);
      
      // Supprimer optimiste
      queryClient.setQueryData<Part[]>(['parts'], (oldData = []) => {
        return oldData.filter(part => part.id !== partId);
      });
      
      return { previousParts };
    },
    onSuccess: (_, partId) => {
      console.log('‚úÖ Suppression r√©ussie de la pi√®ce:', partId);
      
      // Supprimer la pi√®ce du cache
      queryClient.removeQueries({ queryKey: ['parts', partId] });
      // Invalider la liste pour la rafra√Æchir
      queryClient.invalidateQueries({ queryKey: ['parts'] });
      
      toast({
        title: "Pi√®ce supprim√©e",
        description: "La pi√®ce a √©t√© supprim√©e de l'inventaire.",
      });
    },
    onError: (error: any, partId, context) => {
      console.error('‚ùå √âchec de la suppression:', error);
      
      // Restaurer l'√©tat pr√©c√©dent
      if (context?.previousParts) {
        queryClient.setQueryData(['parts'], context.previousParts);
      }
      
      // Message d'erreur sp√©cifique
      let errorMessage = "Impossible de supprimer la pi√®ce";
      
      if (error.code === '23503') {
        errorMessage = "Cette pi√®ce est r√©f√©renc√©e par d'autres √©l√©ments et ne peut pas √™tre supprim√©e.";
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      toast({
        title: "Erreur de suppression",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });
}
