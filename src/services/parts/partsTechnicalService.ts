
import { openai, checkApiKey } from '../openai/client';
import { toast } from 'sonner';

export async function getPartInfo(partNumber: string, context?: string, categories: string[] = []): Promise<any> {
  try {
    // V√©rifier la cl√© API
    if (!checkApiKey()) {
      toast.error('Cl√© API OpenAI manquante', {
        description: 'Configurez VITE_OPENAI_API_KEY dans votre .env.development'
      });
      return null;
    }

    console.log(`üîç Recherche d'informations pour la pi√®ce: ${partNumber}`);
    console.log(`üìã Contexte: ${context || 'Non sp√©cifi√©'}`);
    console.log(`üè∑Ô∏è Cat√©gories identifi√©es: ${categories.join(', ') || 'Aucune'}`);
    
    // Construction du prompt avec contexte et cat√©gories
    const categoryInfo = categories.length > 0 
      ? `Cette pi√®ce appartient probablement √† la cat√©gorie: ${categories.join(' ou ')}.` 
      : '';
      
    const contextPrompt = context 
      ? `Contexte additionnel sur la pi√®ce: ${context}.`
      : '';
    
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "Vous √™tes un expert en pi√®ces d√©tach√©es agricoles. R√©pondez en fran√ßais avec des informations techniques pr√©cises et structur√©es."
        },
        {
          role: "user",
          content: `
Je recherche des informations techniques pr√©cises sur une pi√®ce agricole avec la r√©f√©rence: ${partNumber}.
${contextPrompt}
${categoryInfo}

Fournissez les informations techniques structur√©es suivantes si possible:
1. Fonction principale de la pi√®ce
2. Instructions d'installation/montage
3. Sympt√¥mes de d√©faillance ou d'usure
4. Conseils de maintenance
5. Avertissements ou pr√©cautions d'utilisation
6. √âquipements compatibles

Si vous n'√™tes pas s√ªr d'une information, indiquez-le clairement.`
        }
      ],
      response_format: { type: "json_object" }
    });
    
    // Le parsing est simplifi√© puisque OpenAI retourne directement du JSON valide
    const result = JSON.parse(response.choices[0].message.content);
    console.log("R√©sultat OpenAI:", result);
    
    return result;
  } catch (error) {
    console.error("Erreur API OpenAI:", error);
    toast.error("Erreur de recherche", {
      description: error.message || "Une erreur est survenue lors de la recherche"
    });
    
    return {
      function: `Erreur lors de la recherche: ${error.message}`,
      installation: "Information non disponible",
      symptoms: "Information non disponible",
      maintenance: "Information non disponible",
      warnings: "Information non disponible",
      compatibleEquipment: []
    };
  }
}
