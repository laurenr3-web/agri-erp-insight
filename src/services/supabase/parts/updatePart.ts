
import { supabase } from '@/integrations/supabase/client';
import { Part } from '@/types/Part';

/**
 * Convertit un ID de pi√®ce en nombre si n√©cessaire
 * @param id L'ID de la pi√®ce qui peut √™tre une cha√Æne ou un nombre
 * @returns L'ID num√©rique ou lance une erreur si invalide
 */
function ensureNumericId(id: string | number): number {
  const numericId = typeof id === 'string' ? parseInt(id) : id;
  
  if (isNaN(numericId)) {
    throw new Error(`ID invalide: ${id}`);
  }
  
  return numericId;
}

/**
 * Pr√©pare les donn√©es de la pi√®ce pour la mise √† jour dans Supabase
 * @param part L'objet pi√®ce √† mettre √† jour
 * @returns Les donn√©es format√©es pour Supabase
 */
function preparePartDataForUpdate(part: Part): any {
  // V√©rifier les valeurs obligatoires
  if (!part.name) {
    throw new Error('Le nom de la pi√®ce est obligatoire');
  }
  
  if (!part.partNumber) {
    throw new Error('Le num√©ro de r√©f√©rence est obligatoire');
  }
  
  // V√©rifier que les valeurs num√©riques sont valides
  const price = parseFloat(String(part.price));
  if (isNaN(price)) {
    throw new Error('Le prix doit √™tre un nombre valide');
  }
  
  const stock = parseInt(String(part.stock));
  if (isNaN(stock)) {
    throw new Error('Le stock doit √™tre un nombre entier valide');
  }
  
  const reorderPoint = parseInt(String(part.reorderPoint));
  if (isNaN(reorderPoint)) {
    throw new Error('Le point de r√©approvisionnement doit √™tre un nombre valide');
  }
  
  // Structure correcte pour Supabase
  return {
    name: part.name,
    part_number: part.partNumber,
    category: part.category,
    supplier: part.manufacturer,
    compatible_with: Array.isArray(part.compatibility) ? part.compatibility : [],
    quantity: stock,
    unit_price: price,
    location: part.location,
    reorder_threshold: reorderPoint,
    updated_at: new Date().toISOString()
  };
}

/**
 * Met √† jour une pi√®ce existante dans la base de donn√©es
 * @param part La pi√®ce avec les valeurs mises √† jour
 * @returns Promise r√©solvant vers la pi√®ce mise √† jour
 */
export async function updatePart(part: Part): Promise<Part> {
  console.log('üîÑ D√©but de la mise √† jour de pi√®ce avec ID:', part.id, 'Type:', typeof part.id, 'Donn√©es:', part);
  
  try {
    // Conversion de l'ID en nombre
    const numericId = ensureNumericId(part.id);
    
    // Pr√©paration des donn√©es
    const partData = preparePartDataForUpdate(part);
    
    // Ajout des logs avant l'appel √† Supabase
    console.log('üöÄ Sending update request with data:', partData);
    
    const { data, error } = await supabase
      .from('parts_inventory')
      .update(partData)
      .eq('id', numericId)
      .select('*')
      .single();
    
    // Ajout des logs apr√®s l'appel √† Supabase
    if (error) {
      console.error('‚ùå Supabase error during update:', error);
      console.error('Error details:', error.details);
      
      // Personnalisation des messages d'erreur
      if (error.code === '23505') {
        throw new Error('Cette r√©f√©rence de pi√®ce existe d√©j√† dans l\'inventaire');
      } else if (error.code === '23502') {
        throw new Error('Un ou plusieurs champs obligatoires sont manquants');
      } else if (error.code === '42P01') {
        throw new Error('Probl√®me de connexion √† la base de donn√©es');
      } else if (error.code === '42703') {
        throw new Error('Structure de donn√©es incorrecte');
      } else {
        throw error;
      }
    }
    
    if (!data) {
      console.error('‚ùå Aucune donn√©e retourn√©e apr√®s la mise √† jour');
      throw new Error('Aucune donn√©e retourn√©e apr√®s la mise √† jour. La pi√®ce existe-t-elle?');
    }
    
    console.log('‚úÖ Mise √† jour Supabase r√©ussie, r√©ponse:', data);
    
    // Retourner la pi√®ce mise √† jour avec tous les champs
    return {
      id: data.id,
      name: data.name,
      partNumber: data.part_number || '',
      category: data.category || '',
      manufacturer: data.supplier || '',
      compatibility: data.compatible_with || [],
      stock: data.quantity,
      price: data.unit_price !== null ? data.unit_price : 0,
      location: data.location || '',
      reorderPoint: data.reorder_threshold || 5,
      image: part.image || 'https://placehold.co/100x100/png'
    };
  } catch (err: any) {
    console.error('üí• Exception dans updatePart:', err);
    throw {
      message: err.message || '√âchec de la mise √† jour de la pi√®ce',
      code: err.code,
      details: err.details,
      originalError: err
    };
  }
}
