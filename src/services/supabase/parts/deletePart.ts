
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

/**
 * Supprime une pi√®ce de l'inventaire
 * 
 * @param partId L'identifiant de la pi√®ce √† supprimer
 * @returns Promise r√©solvant √† true si la suppression a r√©ussi
 */
export async function deletePart(partId: string | number): Promise<boolean> {
  console.log("üóëÔ∏è Tentative de suppression de la pi√®ce ID:", partId);
  
  try {
    // V√©rification si l'ID est une cha√Æne num√©rique
    if (typeof partId === 'string' && !isNaN(Number(partId))) {
      partId = Number(partId);
    }
    
    // Suppression avec le bon type d'ID
    const { error } = await supabase
      .from('parts_inventory')
      .delete()
      .eq('id', partId);
      
    if (error) {
      console.error("‚ùå Erreur lors de la suppression:", error);
      
      // Analyse d√©taill√©e des erreurs
      if (error.code === '23503') {
        throw new Error("Impossible de supprimer cette pi√®ce car elle est utilis√©e ailleurs");
      } else if (error.code === '42501') {
        throw new Error("Vous n'avez pas les permissions n√©cessaires pour supprimer cette pi√®ce");
      } else {
        throw new Error(`Erreur lors de la suppression: ${error.message || "Probl√®me inconnu"}`);
      }
    }
    
    console.log("‚úÖ Pi√®ce supprim√©e avec succ√®s");
    return true;
  } catch (error: any) {
    console.error("‚ùå Exception lors de la suppression:", error);
    throw error;
  }
}
