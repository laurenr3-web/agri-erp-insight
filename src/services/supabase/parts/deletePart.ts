
import { supabase } from '@/integrations/supabase/client';

/**
 * Supprime d√©finitivement une pi√®ce de la base de donn√©es par ID
 * 
 * @param partId L'identifiant de la pi√®ce √† supprimer (string ou number)
 * @returns Promise r√©solvant √† void en cas de succ√®s ou rejetant avec une erreur
 */
export async function deletePart(partId: number | string): Promise<void> {
  console.log('üóëÔ∏è D√©but de la suppression de pi√®ce avec ID:', partId);
  
  try {
    // Normalisation de l'ID en fonction du type
    let normalizedId: number | string = partId;
    
    // Si l'ID est une cha√Æne qui peut √™tre convertie en nombre, le faire
    if (typeof partId === 'string' && !isNaN(Number(partId))) {
      normalizedId = Number(partId);
      console.log('ID converti en nombre:', normalizedId);
    }
    
    // V√©rification que l'ID est valide
    if ((typeof normalizedId === 'string' && normalizedId.trim() === '') || 
        (typeof normalizedId === 'number' && !isFinite(normalizedId))) {
      const error = new Error("ID de pi√®ce invalide pour la suppression");
      console.error('‚ùå Validation √©chou√©e:', error);
      throw error;
    }
    
    console.log(`Ex√©cution de la requ√™te de suppression avec ID ${normalizedId} (type: ${typeof normalizedId})`);
    
    // Ex√©cution de la requ√™te avec analyse compl√®te des r√©sultats
    const { error, count, status } = await supabase
      .from('parts_inventory')
      .delete()
      .eq('id', normalizedId)
      .select('count');
    
    if (error) {
      console.error('‚ùå Erreur Supabase:', error);
      console.error('Code de statut HTTP:', status);
      
      // Messages d'erreur plus d√©taill√©s et descriptifs
      if (error.code === '23503') {
        throw new Error("Cette pi√®ce est r√©f√©renc√©e par d'autres √©l√©ments et ne peut pas √™tre supprim√©e");
      } else if (error.code === '42501') {
        throw new Error("Permissions insuffisantes: vous n'avez pas les droits n√©cessaires pour supprimer cette pi√®ce");
      } else if (error.code === '22P02') {
        throw new Error("Format d'identifiant invalide. Veuillez r√©essayer ou contacter le support");
      } else {
        throw new Error(`Erreur lors de la suppression: ${error.message || "Probl√®me inconnu"}`);
      }
    }
    
    // Si aucune ligne n'a √©t√© supprim√©e, c'est que la pi√®ce n'existe pas
    if (count === 0) {
      const notFoundError = new Error("Aucune pi√®ce trouv√©e avec cet identifiant");
      console.warn('‚ö†Ô∏è Suppression sans effet:', notFoundError.message);
      throw notFoundError;
    }
    
    console.log('‚úÖ Suppression r√©ussie');
  } catch (err: any) {
    console.error('‚ùå Exception lors de la suppression:', err);
    
    // Si l'erreur vient de Supabase, elle est d√©j√† format√©e, sinon on l'enveloppe
    if (err.code && err.message) {
      throw err;
    } else {
      throw new Error(err.message || "Une erreur est survenue lors de la suppression de la pi√®ce");
    }
  }
}
