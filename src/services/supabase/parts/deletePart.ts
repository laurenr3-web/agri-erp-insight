
import { supabase } from '@/integrations/supabase/client';
import { ensureNumberId } from '@/utils/typeGuards';
import { checkAuthStatus } from '@/utils/authUtils';

/**
 * Supprime une pi√®ce de l'inventaire
 * 
 * @param partId L'identifiant de la pi√®ce √† supprimer
 * @returns Promise r√©solvant √† un bool√©en indiquant le succ√®s de l'op√©ration
 */
export async function deletePart(partId: number | string): Promise<boolean> {
  console.log("üóëÔ∏è Suppression de la pi√®ce ID:", partId);
  
  try {
    // V√©rifier l'√©tat de l'authentification
    const authStatus = await checkAuthStatus();
    if (!authStatus.isAuthenticated) {
      throw new Error("Vous devez √™tre connect√© pour supprimer des pi√®ces");
    }
    
    // R√©cup√©rer l'ID de l'utilisateur
    const userId = authStatus.session?.user.id;
    
    // Convertir l'ID de la pi√®ce en nombre si n√©cessaire
    const numericId = ensureNumberId(partId);
    
    // V√©rifier d'abord si l'utilisateur est propri√©taire de la pi√®ce
    const { data: ownershipCheck, error: ownershipError } = await supabase
      .from('parts_inventory')
      .select('id, owner_id')
      .eq('id', numericId)
      .single();
      
    if (ownershipError) {
      console.error("‚ùå Erreur lors de la v√©rification de propri√©t√©:", ownershipError);
      throw new Error("Impossible de v√©rifier si vous √™tes propri√©taire de cette pi√®ce");
    }
    
    if (!ownershipCheck) {
      throw new Error("Cette pi√®ce n'existe pas");
    }
    
    if (ownershipCheck.owner_id !== userId) {
      throw new Error("Vous n'√™tes pas autoris√© √† supprimer cette pi√®ce car vous n'en √™tes pas le propri√©taire");
    }
    
    // Proc√©der √† la suppression
    const { error, data } = await supabase
      .from('parts_inventory')
      .delete()
      .eq('id', numericId)
      .select('id');
    
    if (error) {
      console.error("‚ùå Erreur Supabase lors de la suppression:", error);
      
      // V√©rifier si c'est une erreur de RLS
      if (error.code === '42501' || error.message.includes('row-level security')) {
        throw new Error("Vous n'avez pas les permissions n√©cessaires pour supprimer cette pi√®ce");
      } else if (error.code === '23503') {
        throw new Error("Cette pi√®ce est utilis√©e ailleurs et ne peut pas √™tre supprim√©e");
      } else {
        throw new Error(`Erreur lors de la suppression: ${error.message || "Probl√®me inconnu"}`);
      }
    }
    
    // Si aucune donn√©e n'est retourn√©e, la pi√®ce n'existe peut-√™tre pas
    if (!data || data.length === 0) {
      console.warn("‚ö†Ô∏è Aucune pi√®ce n'a √©t√© supprim√©e, v√©rifiez l'ID:", partId);
      return false;
    }
    
    console.log("‚úÖ Pi√®ce supprim√©e avec succ√®s");
    return true;
  } catch (err: any) {
    console.error("‚ùå Exception lors de la suppression de la pi√®ce:", err);
    throw err;
  }
}
