
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { normalizePartId } from '@/services/perplexity/adapters';
import { assertIsValidId, assertIsDefined } from '@/utils/typeAssertions';

/**
 * Supprime une pi√®ce de l'inventaire
 * 
 * @param partId L'identifiant de la pi√®ce √† supprimer
 * @returns Promise r√©solvant √† true si la suppression a r√©ussi
 */
export async function deletePart(partId: string | number): Promise<boolean> {
  console.log("üóëÔ∏è Tentative de suppression de la pi√®ce ID:", partId);
  
  try {
    // Validation explicite de l'ID
    assertIsValidId(partId);
    
    // R√©cup√©ration de l'ID utilisateur actuel
    const { data: sessionData } = await supabase.auth.getSession();
    const userId = sessionData.session?.user.id;
    
    if (!userId) {
      throw new Error("Vous devez √™tre connect√© pour supprimer une pi√®ce");
    }
    
    // Normaliser l'ID au format num√©rique
    const numericId = normalizePartId(partId);
    
    // V√©rifier si l'utilisateur est propri√©taire de la pi√®ce
    const { data: part, error: partError } = await supabase
      .from('parts_inventory')
      .select('owner_id')
      .eq('id', numericId)
      .single();
    
    if (partError) {
      throw new Error(`Erreur lors de la v√©rification de la pi√®ce: ${partError.message}`);
    }
      
    // Si la pi√®ce n'a pas de propri√©taire ou si l'utilisateur est le propri√©taire
    if (part && (part.owner_id === userId || part.owner_id === null)) {
      // Suppression avec le bon type d'ID
      const { error } = await supabase
        .from('parts_inventory')
        .delete()
        .eq('id', numericId);
        
      if (error) {
        console.error("‚ùå Erreur lors de la suppression:", error);
        
        // Analyse d√©taill√©e des erreurs
        if (error.code === '23503') {
          throw new Error("Impossible de supprimer cette pi√®ce car elle est utilis√©e ailleurs");
        } else if (error.code === '42501') {
          throw new Error("Vous n'avez pas les permissions n√©cessaires pour supprimer cette pi√®ce");
        } else {
          throw new Error(`Erreur lors de la suppression: ${error.message || "Probl√®me inconnu"}`);
        }
      }
      
      console.log("‚úÖ Pi√®ce supprim√©e avec succ√®s");
      return true;
    } else {
      throw new Error("Vous n'√™tes pas autoris√© √† supprimer cette pi√®ce");
    }
  } catch (error: unknown) {
    console.error("‚ùå Exception lors de la suppression:", error);
    if (error instanceof Error) {
      throw error;
    } else {
      throw new Error("Une erreur inconnue est survenue lors de la suppression");
    }
  }
}
